# PowerShell Script para Servidor de Impress√£o T√©rmica - Windows
# Uso: .\start-thermal-server.ps1

# Definir encoding para UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

Write-Host ""
Write-Host "===============================================" -ForegroundColor Green
Write-Host "üñ®Ô∏è Servidor de Impress√£o T√©rmica - Windows" -ForegroundColor Green  
Write-Host "===============================================" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para verificar se comando existe
function Test-Command($cmdname) {
    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)
}

# Verificar se Node.js est√° instalado
if (-not (Test-Command "node")) {
    Write-Host "‚ùå Node.js n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Instale o Node.js: https://nodejs.org/" -ForegroundColor Yellow
    Write-Host ""
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Mostrar vers√£o do Node.js
Write-Host "‚öôÔ∏è Verificando Node.js..." -ForegroundColor Blue
$nodeVersion = node --version
Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green

# Verificar se o arquivo do servidor existe
if (-not (Test-Path "thermal-print-server.js")) {
    Write-Host "‚ùå Arquivo thermal-print-server.js n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Execute este script na pasta do projeto" -ForegroundColor Yellow
    Write-Host ""
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar se a porta 3001 est√° em uso
Write-Host ""
Write-Host "üîç Verificando porta 3001..." -ForegroundColor Blue
$portCheck = netstat -ano | Select-String ":3001"
if ($portCheck) {
    Write-Host "‚ö†Ô∏è Porta 3001 j√° est√° em uso!" -ForegroundColor Yellow
    Write-Host "üí° Processos encontrados:" -ForegroundColor Yellow
    netstat -ano | Select-String ":3001"
    Write-Host ""
    $kill = Read-Host "Deseja continuar mesmo assim? (s/n)"
    if ($kill -ne "s") { exit 1 }
}

# Verificar impressora "Generic / Text Only"
Write-Host ""
Write-Host "üîç Verificando impressora 'Generic / Text Only'..." -ForegroundColor Blue
try {
    $printer = Get-WmiObject -Class Win32_Printer | Where-Object { $_.Name -eq "Generic / Text Only" }
    if ($printer) {
        Write-Host "‚úÖ Impressora 'Generic / Text Only' encontrada!" -ForegroundColor Green
        Write-Host "üìä Status: $($printer.PrinterStatus)" -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è Impressora 'Generic / Text Only' n√£o encontrada" -ForegroundColor Yellow
        Write-Host "üí° Verifique:" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Painel de Controle > Dispositivos e Impressoras" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ A impressora deve estar instalada e online" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Nome exato: 'Generic / Text Only'" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "üí° O servidor ainda ser√° iniciado..." -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar impressoras" -ForegroundColor Yellow
}

# Mostrar informa√ß√µes do sistema
Write-Host ""
Write-Host "üíª Informa√ß√µes do sistema:" -ForegroundColor Cyan
Write-Host "   OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor White
Write-Host "   Processador: $([System.Environment]::ProcessorCount) cores" -ForegroundColor White
Write-Host "   Usu√°rio: $([System.Environment]::UserName)" -ForegroundColor White

Write-Host ""
Write-Host "===============================================" -ForegroundColor Green
Write-Host "üöÄ Iniciando servidor..." -ForegroundColor Green
Write-Host "üìã Para parar o servidor: Ctrl+C" -ForegroundColor Yellow
Write-Host "===============================================" -ForegroundColor Green
Write-Host ""

# Configurar tratamento de Ctrl+C
$Global:ServerProcess = $null

# Fun√ß√£o para limpar ao sair
function Stop-Server {
    if ($Global:ServerProcess -and -not $Global:ServerProcess.HasExited) {
        Write-Host ""
        Write-Host "üõë Parando servidor..." -ForegroundColor Yellow
        $Global:ServerProcess.Kill()
        Start-Sleep -Seconds 1
    }
    Write-Host "üëã Servidor encerrado!" -ForegroundColor Green
}

# Registrar evento de sa√≠da
Register-EngineEvent PowerShell.Exiting -Action { Stop-Server }

try {
    # Iniciar o servidor como processo filho
    $Global:ServerProcess = Start-Process -FilePath "node" -ArgumentList "thermal-print-server.js" -NoNewWindow -PassThru
    
    # Aguardar o processo terminar
    $Global:ServerProcess.WaitForExit()
} catch {
    Write-Host "‚ùå Erro ao iniciar servidor: $($_.Exception.Message)" -ForegroundColor Red
} finally {
    Stop-Server
    Read-Host "Pressione Enter para sair"
}
